{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "021ece90",
   "metadata": {
    "papermill": {
     "duration": 0.006344,
     "end_time": "2025-09-19T18:16:11.837337",
     "exception": false,
     "start_time": "2025-09-19T18:16:11.830993",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# MJF-1B: Parkinson's Freezing of Gait Prediction\n",
    "*By Paulene Patrisha Pare*\n",
    "\n",
    "\n",
    "Kaggle competition dataset: https://www.kaggle.com/competitions/tlvmc-parkinsons-freezing-gait-prediction/data\n",
    "\n",
    "Objective: \n",
    "To detect the start and stop of each freezing episode and the occurence in these series of three types of freezing of gait events:\n",
    "* Start Hesitation\n",
    "* Turn\n",
    "* Walking"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e673fe09",
   "metadata": {
    "papermill": {
     "duration": 0.005176,
     "end_time": "2025-09-19T18:16:11.848385",
     "exception": false,
     "start_time": "2025-09-19T18:16:11.843209",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Milestone 1 & 2  \n",
    "\n",
    "Objectives: \n",
    "* Load and label data (attach patient_id)\n",
    "* Ensure consistent units (convert g → m/s²)\n",
    "* Apply a zero-phase band-pass filter (0.1 - 30 Hz) per patient.\n",
    "* Derive a directionless signal (Acc_MAGNITUDE)\n",
    "* Standardize channels per patient (z-score)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de29cfab",
   "metadata": {
    "papermill": {
     "duration": 0.005741,
     "end_time": "2025-09-19T18:16:11.859619",
     "exception": false,
     "start_time": "2025-09-19T18:16:11.853878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Python Libraries\n",
    "* **numpy/pandas**: Numeric and tabular utilities\n",
    "* **polars**: Fast DataFrame ingestion and column ops\n",
    "* **matplotlib/seaborn**: Visualization\n",
    "* **scipy.signal**: Digital filter design and zero-phase\n",
    "* **pathlib/os**: File system handling\n",
    "* **sklearn**: StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "942a65b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:16:11.873522Z",
     "iopub.status.busy": "2025-09-19T18:16:11.872670Z",
     "iopub.status.idle": "2025-09-19T18:16:25.507324Z",
     "shell.execute_reply": "2025-09-19T18:16:25.506260Z"
    },
    "papermill": {
     "duration": 13.644031,
     "end_time": "2025-09-19T18:16:25.509434",
     "exception": false,
     "start_time": "2025-09-19T18:16:11.865403",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np                   \n",
    "import pandas as pd                 \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy.signal import butter, filtfilt\n",
    "import tsfresh\n",
    "import os\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import polars as pl\n",
    "import dask.dataframe as dd\n",
    "from pathlib import Path            "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6504e29a",
   "metadata": {
    "papermill": {
     "duration": 0.005259,
     "end_time": "2025-09-19T18:16:25.520454",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.515195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e570205",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:16:25.532901Z",
     "iopub.status.busy": "2025-09-19T18:16:25.532299Z",
     "iopub.status.idle": "2025-09-19T18:16:25.538011Z",
     "shell.execute_reply": "2025-09-19T18:16:25.536898Z"
    },
    "papermill": {
     "duration": 0.014114,
     "end_time": "2025-09-19T18:16:25.539862",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.525748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# File paths for training datasets\n",
    "defog   = Path('/kaggle/input/tlvmc-parkinsons-freezing-gait-prediction/train/defog')\n",
    "notype  = Path('/kaggle/input/tlvmc-parkinsons-freezing-gait-prediction/train/notype')\n",
    "tdcsfog = Path('/kaggle/input/tlvmc-parkinsons-freezing-gait-prediction/train/tdcsfog')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "15ddb829",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:16:25.553772Z",
     "iopub.status.busy": "2025-09-19T18:16:25.553416Z",
     "iopub.status.idle": "2025-09-19T18:16:25.608879Z",
     "shell.execute_reply": "2025-09-19T18:16:25.607455Z"
    },
    "papermill": {
     "duration": 0.06496,
     "end_time": "2025-09-19T18:16:25.610895",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.545935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All competition datasets:\n",
      "['sample_submission.csv', 'unlabeled', 'subjects.csv', 'tasks.csv', 'defog_metadata.csv', 'daily_metadata.csv', 'test', 'events.csv', 'tdcsfog_metadata.csv', 'train']\n",
      "\n",
      "Folders in train:\n",
      "['defog', 'tdcsfog', 'notype']\n",
      "\n",
      "First 10 files in defog:\n",
      "['be9d33541d.csv', '4c3aa8ea6e.csv', '18e7abc37e.csv', '6a20935af5.csv', 'e642d9ea5f.csv', '3f3b08f78d.csv', '68e7e02a47.csv', 'f17eacf7d8.csv', '3f970065e5.csv', '7030643376.csv']\n",
      "Files remaining: 81\n",
      "\n",
      "First 10 files in tdcsfog:\n",
      "['a171e61840.csv', '4171ea3a0c.csv', '0f985a8440.csv', '5d320ade20.csv', 'ae8c67086b.csv', 'b7214cbf21.csv', 'e18fcafee8.csv', '79568b8e25.csv', 'feba449e1a.csv', '7ebad45aec.csv']\n",
      "Files remaining: 823\n",
      "\n",
      "First 10 files in notype:\n",
      "['1e8d55d48d.csv', '89e9ed32d1.csv', 'e5a0e226fe.csv', '1b3bc93401.csv', '34b979fc28.csv', '9cd837fd53.csv', '60f28aa837.csv', '02ab235146.csv', '6a886a3bb8.csv', '339c0cc15f.csv']\n",
      "Files remaining: 36\n"
     ]
    }
   ],
   "source": [
    "# List all files, folders, and subfolders\n",
    "all_files = os.listdir('../input/tlvmc-parkinsons-freezing-gait-prediction')\n",
    "print('All competition datasets:')\n",
    "print(all_files)\n",
    "\n",
    "print()\n",
    "\n",
    "train_files = os.listdir('../input/tlvmc-parkinsons-freezing-gait-prediction/train')\n",
    "print('Folders in train:')\n",
    "print(train_files)\n",
    "\n",
    "print() \n",
    "\n",
    "defog_files = os.listdir(defog)\n",
    "print('First 10 files in defog:')\n",
    "print(defog_files[:10])\n",
    "print(f'Files remaining: {len(defog_files)-10}')\n",
    "\n",
    "print() \n",
    "\n",
    "tdcsfog_files = os.listdir(tdcsfog)\n",
    "print('First 10 files in tdcsfog:')\n",
    "print(tdcsfog_files[:10])\n",
    "print(f'Files remaining: {len(tdcsfog_files)-10}')\n",
    "\n",
    "print() \n",
    "\n",
    "notype_files = os.listdir(notype)\n",
    "print('First 10 files in notype:')\n",
    "print(notype_files[:10])\n",
    "print(f'Files remaining: {len(notype_files)-10}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c56a02d",
   "metadata": {
    "papermill": {
     "duration": 0.005283,
     "end_time": "2025-09-19T18:16:25.621982",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.616699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# General Helper Functions "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c307578",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:16:25.634660Z",
     "iopub.status.busy": "2025-09-19T18:16:25.634315Z",
     "iopub.status.idle": "2025-09-19T18:16:25.646358Z",
     "shell.execute_reply": "2025-09-19T18:16:25.645282Z"
    },
    "papermill": {
     "duration": 0.02067,
     "end_time": "2025-09-19T18:16:25.648152",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.627482",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_files(folder_path: Path) -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Loads all CSVs from a folder into a single Polars DataFrame.\n",
    "    Adds patient_id from file filename. \n",
    "    \"\"\"\n",
    "    \n",
    "    df_list = []\n",
    "    for path in folder_path.glob(\"*.csv\"): \n",
    "        patient_id = path.stem\n",
    "        df = pl.read_csv(path)\n",
    "        df = df.with_columns(pl.lit(patient_id).alias(\"patient_id\"))\n",
    "        df_list.append(df)\n",
    "    return pl.concat(df_list) if df_list else pl.DataFrame()\n",
    "    \n",
    "\n",
    "def convert_valid_and_task(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Cast Valid and Task columns to Int8 if present.\n",
    "    \"\"\"\n",
    "    out = df\n",
    "    if \"Valid\" in out.columns:\n",
    "        out = out.with_columns(pl.col(\"Valid\").cast(pl.Int8).alias(\"Valid\"))\n",
    "    if \"Task\" in out.columns:\n",
    "        out = out.with_columns(pl.col(\"Task\").cast(pl.Int8).alias(\"Task\"))\n",
    "    return out\n",
    "    \n",
    "\n",
    "def add_acc_magnitude(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Acc magnitude = sqrt(AccV^2 + AccML^2 + AccAP^2).\n",
    "    \"\"\"\n",
    "    \n",
    "    return df.with_columns(\n",
    "        ((pl.col(\"AccV\")**2 + pl.col(\"AccML\")**2 + pl.col(\"AccAP\")**2).sqrt())\n",
    "        .alias(\"Acc_MAGNITUDE\")\n",
    "    )\n",
    "\n",
    "\n",
    "def standardize_acc_by_patient(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Z-score AccV/AccML/AccAP per patient_id.\n",
    "    \"\"\"\n",
    "    \n",
    "    acc_cols = [\"AccV\", \"AccML\", \"AccAP\"]\n",
    "    out = df\n",
    "    for col in acc_cols:\n",
    "        if col in out.columns:\n",
    "            out = out.with_columns(\n",
    "                ((pl.col(col) - pl.col(col).mean().over(\"patient_id\")) /\n",
    "                 pl.col(col).std().over(\"patient_id\")).alias(col)\n",
    "            )\n",
    "    return out\n",
    "\n",
    "def detect_outliers(df: pl.DataFrame, z_thresh: float = 3.0) -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Return rows where any accel channel has |z| > z_thresh (after standardization).\n",
    "    \"\"\"\n",
    "    \n",
    "    acc_cols = [\"AccV\", \"AccML\", \"AccAP\"]\n",
    "    # Build a boolean mask across columns that exist\n",
    "    masks = []\n",
    "    for c in acc_cols:\n",
    "        if c in df.columns:\n",
    "            masks.append(pl.col(c).abs() > z_thresh)\n",
    "    return df.filter(pl.any_horizontal(masks)) if masks else df.head(0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00e5fc45",
   "metadata": {
    "papermill": {
     "duration": 0.005171,
     "end_time": "2025-09-19T18:16:25.659195",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.654024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Filtering Helper Functions \n",
    "* Low-cut (O.1 Hz) removes drift/sensor bias (very slow trends)\n",
    "* High-cut (30 Hz) removes strap/device noise (sudden spikes)\n",
    "* filtfilt: (forward+backward) yields zero phase → no event time shift.\n",
    "\n",
    "We infer sampling frequency from the *Time* column to adapt to slight rate differences "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8958c5fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:16:25.672048Z",
     "iopub.status.busy": "2025-09-19T18:16:25.671680Z",
     "iopub.status.idle": "2025-09-19T18:16:25.686012Z",
     "shell.execute_reply": "2025-09-19T18:16:25.684903Z"
    },
    "papermill": {
     "duration": 0.023307,
     "end_time": "2025-09-19T18:16:25.687939",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.664632",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def infer_fs(time_series: np.ndarray) -> float:\n",
    "    \"\"\"\n",
    "    Infer sampling frequency (Hz) from a time array (seconds) using median Δt.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Avoid zeros / NaNs\n",
    "    dt = np.diff(time_series.astype(float))\n",
    "    dt = dt[np.isfinite(dt) & (dt > 0)]\n",
    "    if dt.size == 0:\n",
    "        raise ValueError(\"Cannot infer sampling frequency from Time column.\")\n",
    "    return 1.0 / np.median(dt)\n",
    "\n",
    "\n",
    "def butter_bandpass(low_hz: float, high_hz: float, fs: float, order: int = 4):\n",
    "    \"\"\"\n",
    "    Design a Butterworth band-pass filter.\n",
    "    \"\"\"\n",
    "    \n",
    "    nyq = fs / 2.0\n",
    "    low = max(1e-6, low_hz / nyq)\n",
    "    high = min(0.999999, high_hz / nyq)\n",
    "    if high <= low:\n",
    "        raise ValueError(f\"Invalid band: low={low_hz}Hz, high={high_hz}Hz for fs={fs}Hz\")\n",
    "    b, a = butter(order, [low, high], btype=\"band\")\n",
    "    return b, a\n",
    "\n",
    "\n",
    "\n",
    "def apply_bandpass_to_polars(df: pl.DataFrame, low_hz: float = 0.1, high_hz: float = 30.0, order: int = 4) -> pl.DataFrame:\n",
    "    \"\"\"\n",
    "    Apply band-pass filter to AccV/AccML/AccAP per patient using scipy.signal.filtfilt.\n",
    "    We convert each patient's slice to pandas to interpolate small gaps, filter, then write back.\n",
    "    Sampling frequency is inferred from Time (seconds).\n",
    "    \"\"\"\n",
    "    needed = [\"Time\", \"patient_id\", \"AccV\", \"AccML\", \"AccAP\"]\n",
    "    for col in [\"Time\", \"patient_id\"]:\n",
    "        if col not in df.columns:\n",
    "            raise ValueError(f\"'{col}' must be present to filter.\")\n",
    "    # Work columns that actually exist\n",
    "    acc_cols = [c for c in [\"AccV\", \"AccML\", \"AccAP\"] if c in df.columns]\n",
    "    if not acc_cols:\n",
    "        return df\n",
    "\n",
    "    # Process per patient to keep borders clean for filtfilt\n",
    "    out_slices = []\n",
    "    for pid, pdf in df.select(needed).to_pandas().groupby(\"patient_id\", sort=False):\n",
    "        # Ensure sorted by time\n",
    "        pdf = pdf.sort_values(\"Time\", kind=\"mergesort\")\n",
    "        fs = infer_fs(pdf[\"Time\"].to_numpy())\n",
    "        b, a = butter_bandpass(low_hz, high_hz, fs, order)\n",
    "\n",
    "        # Interpolate small gaps and filter each channel\n",
    "        for col in acc_cols:\n",
    "            # to_numeric + interpolate to avoid NaNs breaking filtfilt\n",
    "            sig = pd.to_numeric(pdf[col], errors=\"coerce\").interpolate(limit_direction=\"both\").to_numpy(dtype=float)\n",
    "            # If the segment is too short, skip filtering\n",
    "            if sig.size > max(3 * max(len(b), len(a)), 20):\n",
    "                sig_f = filtfilt(b, a, sig, method=\"pad\")\n",
    "            else:\n",
    "                sig_f = sig\n",
    "            pdf[col] = sig_f\n",
    "\n",
    "        out_slices.append(pdf)\n",
    "\n",
    "    # Merge all filtered patient slices back\n",
    "    filtered_pd = pd.concat(out_slices, ignore_index=True)\n",
    "\n",
    "    # Join the filtered columns back onto original Polars df (keeping any extra columns intact)\n",
    "    filtered_pl = pl.from_pandas(filtered_pd[[\"Time\", \"patient_id\"] + acc_cols])\n",
    "    out = df.join(filtered_pl, on=[\"Time\", \"patient_id\"], how=\"left\", suffix=\"_f\")\n",
    "    # Overwrite originals with filtered where available\n",
    "    for col in acc_cols:\n",
    "        fcol = f\"{col}_f\"\n",
    "        out = out.with_columns(\n",
    "            pl.when(pl.col(fcol).is_not_null()).then(pl.col(fcol)).otherwise(pl.col(col)).alias(col)\n",
    "        ).drop(fcol)\n",
    "    return out\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9838d097",
   "metadata": {
    "papermill": {
     "duration": 0.005245,
     "end_time": "2025-09-19T18:16:25.698926",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.693681",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load training dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4c9aa198",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:16:25.711206Z",
     "iopub.status.busy": "2025-09-19T18:16:25.710860Z",
     "iopub.status.idle": "2025-09-19T18:17:02.517733Z",
     "shell.execute_reply": "2025-09-19T18:17:02.516627Z"
    },
    "papermill": {
     "duration": 36.815311,
     "end_time": "2025-09-19T18:17:02.519659",
     "exception": false,
     "start_time": "2025-09-19T18:16:25.704348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "defog_df   = load_files(defog)\n",
    "notype_df  = load_files(notype)\n",
    "tdcsfog_df = load_files(tdcsfog)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2f233b0",
   "metadata": {
    "papermill": {
     "duration": 0.005299,
     "end_time": "2025-09-19T18:17:02.530927",
     "exception": false,
     "start_time": "2025-09-19T18:17:02.525628",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Review Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d72095b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:02.543171Z",
     "iopub.status.busy": "2025-09-19T18:17:02.542850Z",
     "iopub.status.idle": "2025-09-19T18:17:07.039231Z",
     "shell.execute_reply": "2025-09-19T18:17:07.037879Z"
    },
    "papermill": {
     "duration": 4.504687,
     "end_time": "2025-09-19T18:17:07.041172",
     "exception": false,
     "start_time": "2025-09-19T18:17:02.536485",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (5, 10)\n",
      "┌──────┬───────────┬──────────┬──────────┬───┬─────────┬───────┬───────┬────────────┐\n",
      "│ Time ┆ AccV      ┆ AccML    ┆ AccAP    ┆ … ┆ Walking ┆ Valid ┆ Task  ┆ patient_id │\n",
      "│ ---  ┆ ---       ┆ ---      ┆ ---      ┆   ┆ ---     ┆ ---   ┆ ---   ┆ ---        │\n",
      "│ i64  ┆ f64       ┆ f64      ┆ f64      ┆   ┆ i64     ┆ bool  ┆ bool  ┆ str        │\n",
      "╞══════╪═══════════╪══════════╪══════════╪═══╪═════════╪═══════╪═══════╪════════════╡\n",
      "│ 0    ┆ -1.002697 ┆ 0.022371 ┆ 0.068304 ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 1    ┆ -1.002641 ┆ 0.019173 ┆ 0.066162 ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 2    ┆ -0.99982  ┆ 0.019142 ┆ 0.067536 ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 3    ┆ -0.998023 ┆ 0.018378 ┆ 0.068409 ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 4    ┆ -0.998359 ┆ 0.016726 ┆ 0.066448 ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "└──────┴───────────┴──────────┴──────────┴───┴─────────┴───────┴───────┴────────────┘\n",
      "shape: (9, 11)\n",
      "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
      "│ statistic ┆ Time      ┆ AccV      ┆ AccML     ┆ … ┆ Walking   ┆ Valid     ┆ Task      ┆ patient_ │\n",
      "│ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---       ┆ ---       ┆ ---       ┆ id       │\n",
      "│ str       ┆ f64       ┆ f64       ┆ f64       ┆   ┆ f64       ┆ f64       ┆ f64       ┆ ---      │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ str      │\n",
      "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
      "│ count     ┆ 1.3525702 ┆ 1.3525702 ┆ 1.3525702 ┆ … ┆ 1.3525702 ┆ 1.3525702 ┆ 1.3525702 ┆ 13525702 │\n",
      "│           ┆ e7        ┆ e7        ┆ e7        ┆   ┆ e7        ┆ e7        ┆ e7        ┆          │\n",
      "│ null_coun ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ 0        │\n",
      "│ t         ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ mean      ┆ 86611.589 ┆ -0.940173 ┆ 0.001173  ┆ … ┆ 0.007284  ┆ 0.302426  ┆ 0.306526  ┆ null     │\n",
      "│           ┆ 61        ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ std       ┆ 64791.572 ┆ 0.086065  ┆ 0.120008  ┆ … ┆ 0.085034  ┆ null      ┆ null      ┆ null     │\n",
      "│           ┆ 173       ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ min       ┆ 0.0       ┆ -6.024701 ┆ -4.059201 ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ 02ea7826 │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ 81       │\n",
      "│ 25%       ┆ 37256.0   ┆ -0.986571 ┆ -0.0625   ┆ … ┆ 0.0       ┆ null      ┆ null      ┆ null     │\n",
      "│ 50%       ┆ 75149.0   ┆ -0.953125 ┆ 0.002385  ┆ … ┆ 0.0       ┆ null      ┆ null      ┆ null     │\n",
      "│ 75%       ┆ 121179.0  ┆ -0.90625  ┆ 0.078125  ┆ … ┆ 0.0       ┆ null      ┆ null      ┆ null     │\n",
      "│ max       ┆ 415387.0  ┆ 4.458365  ┆ 4.524038  ┆ … ┆ 1.0       ┆ 1.0       ┆ 1.0       ┆ f9fc61ce │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ 85       │\n",
      "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘\n",
      "(13525702, 10)\n",
      "['Time', 'AccV', 'AccML', 'AccAP', 'StartHesitation', 'Turn', 'Walking', 'Valid', 'Task', 'patient_id']\n",
      "[Int64, Float64, Float64, Float64, Int64, Int64, Int64, Boolean, Boolean, String]\n",
      "shape: (5, 8)\n",
      "┌──────┬───────────┬───────────┬──────────┬───────┬───────┬───────┬────────────┐\n",
      "│ Time ┆ AccV      ┆ AccML     ┆ AccAP    ┆ Event ┆ Valid ┆ Task  ┆ patient_id │\n",
      "│ ---  ┆ ---       ┆ ---       ┆ ---      ┆ ---   ┆ ---   ┆ ---   ┆ ---        │\n",
      "│ i64  ┆ f64       ┆ f64       ┆ f64      ┆ i64   ┆ bool  ┆ bool  ┆ str        │\n",
      "╞══════╪═══════════╪═══════════╪══════════╪═══════╪═══════╪═══════╪════════════╡\n",
      "│ 0    ┆ -0.991926 ┆ -0.119916 ┆ 0.050087 ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 1    ┆ -0.994243 ┆ -0.118624 ┆ 0.049909 ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 2    ┆ -0.99584  ┆ -0.118602 ┆ 0.048774 ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 3    ┆ -0.995865 ┆ -0.121627 ┆ 0.04809  ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 4    ┆ -0.99233  ┆ -0.122146 ┆ 0.048878 ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "└──────┴───────────┴───────────┴──────────┴───────┴───────┴───────┴────────────┘\n",
      "(10251114, 8)\n",
      "['Time', 'AccV', 'AccML', 'AccAP', 'Event', 'Valid', 'Task', 'patient_id']\n",
      "[Int64, Float64, Float64, Float64, Int64, Boolean, Boolean, String]\n",
      "shape: (9, 9)\n",
      "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
      "│ statistic ┆ Time      ┆ AccV      ┆ AccML     ┆ … ┆ Event     ┆ Valid     ┆ Task      ┆ patient_ │\n",
      "│ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---       ┆ ---       ┆ ---       ┆ id       │\n",
      "│ str       ┆ f64       ┆ f64       ┆ f64       ┆   ┆ f64       ┆ f64       ┆ f64       ┆ ---      │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ str      │\n",
      "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
      "│ count     ┆ 1.0251114 ┆ 1.0251114 ┆ 1.0251114 ┆ … ┆ 1.0251114 ┆ 1.0251114 ┆ 1.0251114 ┆ 10251114 │\n",
      "│           ┆ e7        ┆ e7        ┆ e7        ┆   ┆ e7        ┆ e7        ┆ e7        ┆          │\n",
      "│ null_coun ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ 0        │\n",
      "│ t         ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ mean      ┆ 123128.63 ┆ -0.932382 ┆ -0.07878  ┆ … ┆ 0.048702  ┆ 0.331116  ┆ 0.334288  ┆ null     │\n",
      "│           ┆ 4988      ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ std       ┆ 84077.542 ┆ 0.086195  ┆ 0.126094  ┆ … ┆ 0.215243  ┆ null      ┆ null      ┆ null     │\n",
      "│           ┆ 879       ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ min       ┆ 0.0       ┆ -5.738525 ┆ -3.625081 ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ 02ab2351 │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ 46       │\n",
      "│ 25%       ┆ 55712.0   ┆ -0.979533 ┆ -0.15462  ┆ … ┆ 0.0       ┆ null      ┆ null      ┆ null     │\n",
      "│ 50%       ┆ 111533.0  ┆ -0.945709 ┆ -0.07047  ┆ … ┆ 0.0       ┆ null      ┆ null      ┆ null     │\n",
      "│ 75%       ┆ 175592.0  ┆ -0.890877 ┆ -0.006932 ┆ … ┆ 0.0       ┆ null      ┆ null      ┆ null     │\n",
      "│ max       ┆ 443495.0  ┆ 1.223533  ┆ 4.328019  ┆ … ┆ 1.0       ┆ 1.0       ┆ 1.0       ┆ e8e530a4 │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ f9       │\n",
      "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘\n",
      "shape: (5, 8)\n",
      "┌──────┬───────────┬──────────┬──────────┬─────────────────┬──────┬─────────┬────────────┐\n",
      "│ Time ┆ AccV      ┆ AccML    ┆ AccAP    ┆ StartHesitation ┆ Turn ┆ Walking ┆ patient_id │\n",
      "│ ---  ┆ ---       ┆ ---      ┆ ---      ┆ ---             ┆ ---  ┆ ---     ┆ ---        │\n",
      "│ i64  ┆ f64       ┆ f64      ┆ f64      ┆ i64             ┆ i64  ┆ i64     ┆ str        │\n",
      "╞══════╪═══════════╪══════════╪══════════╪═════════════════╪══════╪═════════╪════════════╡\n",
      "│ 0    ┆ -9.66589  ┆ 0.04255  ┆ 0.184744 ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 1    ┆ -9.672969 ┆ 0.049217 ┆ 0.184644 ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 2    ┆ -9.67026  ┆ 0.03362  ┆ 0.19379  ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 3    ┆ -9.673356 ┆ 0.035159 ┆ 0.184369 ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 4    ┆ -9.671458 ┆ 0.043913 ┆ 0.197814 ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "└──────┴───────────┴──────────┴──────────┴─────────────────┴──────┴─────────┴────────────┘\n",
      "(7062672, 8)\n",
      "['Time', 'AccV', 'AccML', 'AccAP', 'StartHesitation', 'Turn', 'Walking', 'patient_id']\n",
      "[Int64, Float64, Float64, Float64, Int64, Int64, Int64, String]\n",
      "shape: (9, 9)\n",
      "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
      "│ statistic ┆ Time      ┆ AccV      ┆ AccML     ┆ … ┆ StartHesi ┆ Turn      ┆ Walking   ┆ patient_ │\n",
      "│ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ tation    ┆ ---       ┆ ---       ┆ id       │\n",
      "│ str       ┆ f64       ┆ f64       ┆ f64       ┆   ┆ ---       ┆ f64       ┆ f64       ┆ ---      │\n",
      "│           ┆           ┆           ┆           ┆   ┆ f64       ┆           ┆           ┆ str      │\n",
      "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
      "│ count     ┆ 7.062672e ┆ 7.062672e ┆ 7.062672e ┆ … ┆ 7.062672e ┆ 7.062672e ┆ 7.062672e ┆ 7062672  │\n",
      "│           ┆ 6         ┆ 6         ┆ 6         ┆   ┆ 6         ┆ 6         ┆ 6         ┆          │\n",
      "│ null_coun ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ 0        │\n",
      "│ t         ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ mean      ┆ 9289.4672 ┆ -9.306317 ┆ -0.201251 ┆ … ┆ 0.043155  ┆ 0.237698  ┆ 0.029428  ┆ null     │\n",
      "│           ┆ 97        ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ std       ┆ 13998.925 ┆ 1.080174  ┆ 1.269525  ┆ … ┆ 0.203206  ┆ 0.425673  ┆ 0.169002  ┆ null     │\n",
      "│           ┆ 696       ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
      "│ min       ┆ 0.0       ┆ -35.52111 ┆ -26.16439 ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ 003f117e │\n",
      "│           ┆           ┆ 9         ┆ 8         ┆   ┆           ┆           ┆           ┆ 14       │\n",
      "│ 25%       ┆ 2119.0    ┆ -9.762402 ┆ -0.929545 ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ null     │\n",
      "│ 50%       ┆ 4310.0    ┆ -9.363524 ┆ -0.172224 ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ null     │\n",
      "│ 75%       ┆ 8433.0    ┆ -8.776815 ┆ 0.575211  ┆ … ┆ 0.0       ┆ 0.0       ┆ 0.0       ┆ null     │\n",
      "│ max       ┆ 97076.0   ┆ 20.906953 ┆ 27.484719 ┆ … ┆ 1.0       ┆ 1.0       ┆ 1.0       ┆ ffda8fad │\n",
      "│           ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆ fd       │\n",
      "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘\n",
      "           Id      Init  Completion  Type  Kinetic\n",
      "0  003f117e14   8.61312     14.7731  Turn      1.0\n",
      "1  009ee11563  11.38470     41.1847  Turn      1.0\n",
      "2  009ee11563  54.66470     58.7847  Turn      1.0\n",
      "3  011322847a  28.09660     30.2966  Turn      1.0\n",
      "4  01d0fe7266  30.31840     31.8784  Turn      1.0\n",
      "(3544, 5)\n",
      "Index(['Id', 'Init', 'Completion', 'Type', 'Kinetic'], dtype='object')\n",
      "Id             object\n",
      "Init          float64\n",
      "Completion    float64\n",
      "Type           object\n",
      "Kinetic       float64\n",
      "dtype: object\n",
      "              Init   Completion      Kinetic\n",
      "count  3544.000000  3544.000000  2502.000000\n",
      "mean    956.298418   964.489046     0.817746\n",
      "std     946.357201   943.968560     0.386131\n",
      "min     -30.669000   -29.719000     0.000000\n",
      "25%      39.518175    48.610800     1.000000\n",
      "50%     768.656500   774.261000     1.000000\n",
      "75%    1570.300000  1576.697250     1.000000\n",
      "max    4381.217000  4392.745000     1.000000\n",
      "shape: (91,)\n",
      "Series: 'patient_id' [str]\n",
      "[\n",
      "\t\"5f7c0cfbb5\"\n",
      "\t\"32843e32b6\"\n",
      "\t\"771d69d829\"\n",
      "\t\"7a993fbed7\"\n",
      "\t\"2a01c919c0\"\n",
      "\t…\n",
      "\t\"850748a138\"\n",
      "\t\"7030643376\"\n",
      "\t\"54c6a21be6\"\n",
      "\t\"2b6a1c294a\"\n",
      "\t\"88c6d288fb\"\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "print(defog_df.head())\n",
    "print(defog_df.describe())\n",
    "print(defog_df.shape)\n",
    "print(defog_df.columns)\n",
    "print(defog_df.dtypes)\n",
    "\n",
    "print(notype_df.head())\n",
    "print(notype_df.shape)\n",
    "print(notype_df.columns)\n",
    "print(notype_df.dtypes)\n",
    "print(notype_df.describe())\n",
    "\n",
    "print(tdcsfog_df.head())\n",
    "print(tdcsfog_df.shape)\n",
    "print(tdcsfog_df.columns)\n",
    "print(tdcsfog_df.dtypes)\n",
    "print(tdcsfog_df.describe())\n",
    "\n",
    "events_df = pd.read_csv('/kaggle/input/tlvmc-parkinsons-freezing-gait-prediction/events.csv')\n",
    "print(events_df.head())\n",
    "print(events_df.shape)\n",
    "print(events_df.columns)\n",
    "print(events_df.dtypes)\n",
    "print(events_df.describe())\n",
    "\n",
    "unique_defog_patients = defog_df[\"patient_id\"].unique()\n",
    "print(unique_defog_patients)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "948d5e54",
   "metadata": {
    "papermill": {
     "duration": 0.005928,
     "end_time": "2025-09-19T18:17:07.053662",
     "exception": false,
     "start_time": "2025-09-19T18:17:07.047734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Unit Conversions \n",
    "* (g -> m/s^2) for ALL training datasets\n",
    "* Models expect consistent physical units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ddb32082",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:07.068172Z",
     "iopub.status.busy": "2025-09-19T18:17:07.067669Z",
     "iopub.status.idle": "2025-09-19T18:17:08.145598Z",
     "shell.execute_reply": "2025-09-19T18:17:08.141988Z"
    },
    "papermill": {
     "duration": 1.089042,
     "end_time": "2025-09-19T18:17:08.148904",
     "exception": false,
     "start_time": "2025-09-19T18:17:07.059862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (13_525_702, 10)\n",
      "┌────────┬───────────┬──────────┬───────────┬───┬─────────┬───────┬───────┬────────────┐\n",
      "│ Time   ┆ AccV      ┆ AccML    ┆ AccAP     ┆ … ┆ Walking ┆ Valid ┆ Task  ┆ patient_id │\n",
      "│ ---    ┆ ---       ┆ ---      ┆ ---       ┆   ┆ ---     ┆ ---   ┆ ---   ┆ ---        │\n",
      "│ i64    ┆ f64       ┆ f64      ┆ f64       ┆   ┆ i64     ┆ bool  ┆ bool  ┆ str        │\n",
      "╞════════╪═══════════╪══════════╪═══════════╪═══╪═════════╪═══════╪═══════╪════════════╡\n",
      "│ 0      ┆ -9.833101 ┆ 0.219382 ┆ 0.669832  ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 1      ┆ -9.832554 ┆ 0.188024 ┆ 0.648829  ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 2      ┆ -9.804885 ┆ 0.187721 ┆ 0.662298  ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 3      ┆ -9.787264 ┆ 0.180227 ┆ 0.670866  ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ 4      ┆ -9.790555 ┆ 0.164025 ┆ 0.651633  ┆ … ┆ 0       ┆ false ┆ false ┆ be9d33541d │\n",
      "│ …      ┆ …         ┆ …        ┆ …         ┆ … ┆ …       ┆ …     ┆ …     ┆ …          │\n",
      "│ 109120 ┆ -9.210807 ┆ 0.30954  ┆ -3.871049 ┆ … ┆ 0       ┆ false ┆ false ┆ 06414383cf │\n",
      "│ 109121 ┆ -9.228995 ┆ 0.309714 ┆ -3.850343 ┆ … ┆ 0       ┆ false ┆ false ┆ 06414383cf │\n",
      "│ 109122 ┆ -9.219534 ┆ 0.285297 ┆ -3.867594 ┆ … ┆ 0       ┆ false ┆ false ┆ 06414383cf │\n",
      "│ 109123 ┆ -9.216992 ┆ 0.27516  ┆ -3.909563 ┆ … ┆ 0       ┆ false ┆ false ┆ 06414383cf │\n",
      "│ 109124 ┆ -9.208502 ┆ 0.261129 ┆ -3.907498 ┆ … ┆ 0       ┆ false ┆ false ┆ 06414383cf │\n",
      "└────────┴───────────┴──────────┴───────────┴───┴─────────┴───────┴───────┴────────────┘\n",
      "shape: (10_251_114, 8)\n",
      "┌────────┬───────────┬───────────┬───────────┬───────┬───────┬───────┬────────────┐\n",
      "│ Time   ┆ AccV      ┆ AccML     ┆ AccAP     ┆ Event ┆ Valid ┆ Task  ┆ patient_id │\n",
      "│ ---    ┆ ---       ┆ ---       ┆ ---       ┆ ---   ┆ ---   ┆ ---   ┆ ---        │\n",
      "│ i64    ┆ f64       ┆ f64       ┆ f64       ┆ i64   ┆ bool  ┆ bool  ┆ str        │\n",
      "╞════════╪═══════════╪═══════════╪═══════════╪═══════╪═══════╪═══════╪════════════╡\n",
      "│ 0      ┆ -9.727468 ┆ -1.175975 ┆ 0.491184  ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 1      ┆ -9.750189 ┆ -1.163302 ┆ 0.489444  ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 2      ┆ -9.765857 ┆ -1.163087 ┆ 0.478313  ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 3      ┆ -9.766098 ┆ -1.192753 ┆ 0.471599  ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ 4      ┆ -9.731436 ┆ -1.19784  ┆ 0.479333  ┆ 0     ┆ false ┆ false ┆ 1e8d55d48d │\n",
      "│ …      ┆ …         ┆ …         ┆ …         ┆ …     ┆ …     ┆ …     ┆ …          │\n",
      "│ 443491 ┆ -8.336771 ┆ -1.537457 ┆ -4.896186 ┆ 0     ┆ false ┆ false ┆ 434732a5e3 │\n",
      "│ 443492 ┆ -8.309133 ┆ -1.583071 ┆ -4.873271 ┆ 0     ┆ false ┆ false ┆ 434732a5e3 │\n",
      "│ 443493 ┆ -8.298749 ┆ -1.609258 ┆ -4.858621 ┆ 0     ┆ false ┆ false ┆ 434732a5e3 │\n",
      "│ 443494 ┆ -8.271171 ┆ -1.608903 ┆ -4.858399 ┆ 0     ┆ false ┆ false ┆ 434732a5e3 │\n",
      "│ 443495 ┆ -8.237273 ┆ -1.585128 ┆ -4.865256 ┆ 0     ┆ false ┆ false ┆ 434732a5e3 │\n",
      "└────────┴───────────┴───────────┴───────────┴───────┴───────┴───────┴────────────┘\n",
      "shape: (7_062_672, 8)\n",
      "┌──────┬────────────┬───────────┬────────────┬─────────────────┬──────┬─────────┬────────────┐\n",
      "│ Time ┆ AccV       ┆ AccML     ┆ AccAP      ┆ StartHesitation ┆ Turn ┆ Walking ┆ patient_id │\n",
      "│ ---  ┆ ---        ┆ ---       ┆ ---        ┆ ---             ┆ ---  ┆ ---     ┆ ---        │\n",
      "│ i64  ┆ f64        ┆ f64       ┆ f64        ┆ i64             ┆ i64  ┆ i64     ┆ str        │\n",
      "╞══════╪════════════╪═══════════╪════════════╪═════════════════╪══════╪═════════╪════════════╡\n",
      "│ 0    ┆ -94.79     ┆ 0.417272  ┆ 1.811716   ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 1    ┆ -94.85942  ┆ 0.48265   ┆ 1.810744   ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 2    ┆ -94.832859 ┆ 0.329699  ┆ 1.900435   ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 3    ┆ -94.863213 ┆ 0.344791  ┆ 1.808046   ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ 4    ┆ -94.844599 ┆ 0.430635  ┆ 1.939889   ┆ 0               ┆ 0    ┆ 0       ┆ a171e61840 │\n",
      "│ …    ┆ …          ┆ …         ┆ …          ┆ …               ┆ …    ┆ …       ┆ …          │\n",
      "│ 5153 ┆ -97.241955 ┆ -1.038494 ┆ -11.017327 ┆ 0               ┆ 0    ┆ 0       ┆ 0506d9a39f │\n",
      "│ 5154 ┆ -95.063238 ┆ -0.655982 ┆ -10.933467 ┆ 0               ┆ 0    ┆ 0       ┆ 0506d9a39f │\n",
      "│ 5155 ┆ -93.635049 ┆ -0.964145 ┆ -10.906198 ┆ 0               ┆ 0    ┆ 0       ┆ 0506d9a39f │\n",
      "│ 5156 ┆ -92.867045 ┆ -1.088582 ┆ -11.089498 ┆ 0               ┆ 0    ┆ 0       ┆ 0506d9a39f │\n",
      "│ 5157 ┆ -93.813537 ┆ -1.116631 ┆ -10.8202   ┆ 0               ┆ 0    ┆ 0       ┆ 0506d9a39f │\n",
      "└──────┴────────────┴───────────┴────────────┴─────────────────┴──────┴─────────┴────────────┘\n"
     ]
    }
   ],
   "source": [
    "G_CONVERSION = 9.80665\n",
    "for df_name in [\"defog_df\", \"notype_df\", \"tdcsfog_df\"]:\n",
    "    df_tmp = locals()[df_name]\n",
    "    acc_cols = [c for c in [\"AccV\", \"AccML\", \"AccAP\"] if c in df_tmp.columns]\n",
    "    if acc_cols:\n",
    "        # Multiply in-place using with_columns to avoid SettingWithCopy issues\n",
    "        locals()[df_name] = df_tmp.with_columns([ (pl.col(c) * G_CONVERSION).alias(c) for c in acc_cols ])\n",
    "\n",
    "print(defog_df)\n",
    "print(notype_df)\n",
    "print(tdcsfog_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc8e48e2",
   "metadata": {
    "papermill": {
     "duration": 0.010133,
     "end_time": "2025-09-19T18:17:08.169447",
     "exception": false,
     "start_time": "2025-09-19T18:17:08.159314",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Cast Valid/Task to integers where present"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "64be0b52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:08.184108Z",
     "iopub.status.busy": "2025-09-19T18:17:08.183743Z",
     "iopub.status.idle": "2025-09-19T18:17:08.440081Z",
     "shell.execute_reply": "2025-09-19T18:17:08.439002Z"
    },
    "papermill": {
     "duration": 0.265373,
     "end_time": "2025-09-19T18:17:08.441888",
     "exception": false,
     "start_time": "2025-09-19T18:17:08.176515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (13_525_702, 10)\n",
      "┌────────┬───────────┬──────────┬───────────┬───┬─────────┬───────┬──────┬────────────┐\n",
      "│ Time   ┆ AccV      ┆ AccML    ┆ AccAP     ┆ … ┆ Walking ┆ Valid ┆ Task ┆ patient_id │\n",
      "│ ---    ┆ ---       ┆ ---      ┆ ---       ┆   ┆ ---     ┆ ---   ┆ ---  ┆ ---        │\n",
      "│ i64    ┆ f64       ┆ f64      ┆ f64       ┆   ┆ i64     ┆ i8    ┆ i8   ┆ str        │\n",
      "╞════════╪═══════════╪══════════╪═══════════╪═══╪═════════╪═══════╪══════╪════════════╡\n",
      "│ 0      ┆ -9.833101 ┆ 0.219382 ┆ 0.669832  ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ be9d33541d │\n",
      "│ 1      ┆ -9.832554 ┆ 0.188024 ┆ 0.648829  ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ be9d33541d │\n",
      "│ 2      ┆ -9.804885 ┆ 0.187721 ┆ 0.662298  ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ be9d33541d │\n",
      "│ 3      ┆ -9.787264 ┆ 0.180227 ┆ 0.670866  ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ be9d33541d │\n",
      "│ 4      ┆ -9.790555 ┆ 0.164025 ┆ 0.651633  ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ be9d33541d │\n",
      "│ …      ┆ …         ┆ …        ┆ …         ┆ … ┆ …       ┆ …     ┆ …    ┆ …          │\n",
      "│ 109120 ┆ -9.210807 ┆ 0.30954  ┆ -3.871049 ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ 06414383cf │\n",
      "│ 109121 ┆ -9.228995 ┆ 0.309714 ┆ -3.850343 ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ 06414383cf │\n",
      "│ 109122 ┆ -9.219534 ┆ 0.285297 ┆ -3.867594 ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ 06414383cf │\n",
      "│ 109123 ┆ -9.216992 ┆ 0.27516  ┆ -3.909563 ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ 06414383cf │\n",
      "│ 109124 ┆ -9.208502 ┆ 0.261129 ┆ -3.907498 ┆ … ┆ 0       ┆ 0     ┆ 0    ┆ 06414383cf │\n",
      "└────────┴───────────┴──────────┴───────────┴───┴─────────┴───────┴──────┴────────────┘\n"
     ]
    }
   ],
   "source": [
    "defog_df   = convert_valid_and_task(defog_df)\n",
    "notype_df  = convert_valid_and_task(notype_df)\n",
    "tdcsfog_df = convert_valid_and_task(tdcsfog_df)\n",
    "print(defog_df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7393ce2",
   "metadata": {
    "papermill": {
     "duration": 0.006142,
     "end_time": "2025-09-19T18:17:08.454641",
     "exception": false,
     "start_time": "2025-09-19T18:17:08.448499",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Band-pass filter per patient \n",
    "* Removes slow drift (<0.1 Hz) and high-frequency noise (>30 Hz) while preserving gait content.\n",
    "* Uses zero-phase filtering to keep temporal alignmnet with labels/events. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6d77446d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:08.469292Z",
     "iopub.status.busy": "2025-09-19T18:17:08.468941Z",
     "iopub.status.idle": "2025-09-19T18:17:53.078067Z",
     "shell.execute_reply": "2025-09-19T18:17:53.070562Z"
    },
    "papermill": {
     "duration": 44.632648,
     "end_time": "2025-09-19T18:17:53.094238",
     "exception": false,
     "start_time": "2025-09-19T18:17:08.461590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "defog_df   = apply_bandpass_to_polars(defog_df,   low_hz=0.1, high_hz=30.0, order=4)\n",
    "notype_df  = apply_bandpass_to_polars(notype_df,  low_hz=0.1, high_hz=30.0, order=4)\n",
    "tdcsfog_df = apply_bandpass_to_polars(tdcsfog_df, low_hz=0.1, high_hz=30.0, order=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91b409be",
   "metadata": {
    "papermill": {
     "duration": 0.032612,
     "end_time": "2025-09-19T18:17:53.171357",
     "exception": false,
     "start_time": "2025-09-19T18:17:53.138745",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Acceleration magnitude \n",
    "* Vector magnitude summarizes the intensity in one channel "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b02d983b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:53.263455Z",
     "iopub.status.busy": "2025-09-19T18:17:53.259220Z",
     "iopub.status.idle": "2025-09-19T18:17:56.731354Z",
     "shell.execute_reply": "2025-09-19T18:17:56.725476Z"
    },
    "papermill": {
     "duration": 3.529852,
     "end_time": "2025-09-19T18:17:56.739328",
     "exception": false,
     "start_time": "2025-09-19T18:17:53.209476",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "defog_df   = add_acc_magnitude(defog_df)\n",
    "notype_df  = add_acc_magnitude(notype_df)\n",
    "tdcsfog_df = add_acc_magnitude(tdcsfog_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcd19316",
   "metadata": {
    "papermill": {
     "duration": 0.024086,
     "end_time": "2025-09-19T18:17:56.798609",
     "exception": false,
     "start_time": "2025-09-19T18:17:56.774523",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Outlier Flags \n",
    "* Quick QA to inspect extreme values that might indicate hardware glitches. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f1c49e75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:56.858508Z",
     "iopub.status.busy": "2025-09-19T18:17:56.858153Z",
     "iopub.status.idle": "2025-09-19T18:17:58.820867Z",
     "shell.execute_reply": "2025-09-19T18:17:58.819505Z"
    },
    "papermill": {
     "duration": 2.003753,
     "end_time": "2025-09-19T18:17:58.823043",
     "exception": false,
     "start_time": "2025-09-19T18:17:56.819290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (9_744_217, 12)\n",
      "┌───────┬────────────┬────────────┬─────────────┬───┬──────┬────────────┬─────────────┬────────────┐\n",
      "│ Time  ┆ AccV       ┆ AccML      ┆ AccAP       ┆ … ┆ Task ┆ patient_id ┆ Acc_MAGNITU ┆ is_outlier │\n",
      "│ ---   ┆ ---        ┆ ---        ┆ ---         ┆   ┆ ---  ┆ ---        ┆ DE          ┆ _mag       │\n",
      "│ i64   ┆ f64        ┆ f64        ┆ f64         ┆   ┆ i8   ┆ str        ┆ ---         ┆ ---        │\n",
      "│       ┆            ┆            ┆             ┆   ┆      ┆            ┆ f64         ┆ bool       │\n",
      "╞═══════╪════════════╪════════════╪═════════════╪═══╪══════╪════════════╪═════════════╪════════════╡\n",
      "│ 0     ┆ -59.771776 ┆ -58.37085  ┆ -129.343338 ┆ … ┆ 0    ┆ be9d33541d ┆ 153.978961  ┆ true       │\n",
      "│ 1     ┆ 59.753772  ┆ 58.356426  ┆ 129.315529  ┆ … ┆ 0    ┆ be9d33541d ┆ 153.943145  ┆ true       │\n",
      "│ 2     ┆ -59.76452  ┆ -58.354606 ┆ -129.329472 ┆ … ┆ 0    ┆ be9d33541d ┆ 153.95834   ┆ true       │\n",
      "│ 3     ┆ 59.786412  ┆ 58.372004  ┆ 129.335044  ┆ … ┆ 0    ┆ be9d33541d ┆ 153.978113  ┆ true       │\n",
      "│ 4     ┆ -59.728397 ┆ -58.350124 ┆ -129.300058 ┆ … ┆ 0    ┆ be9d33541d ┆ 153.917911  ┆ true       │\n",
      "│ …     ┆ …          ┆ …          ┆ …           ┆ … ┆ …    ┆ …          ┆ …           ┆ …          │\n",
      "│ 52925 ┆ 24.679778  ┆ -0.164453  ┆ 17.214027   ┆ … ┆ 0    ┆ 06414383cf ┆ 30.09055    ┆ true       │\n",
      "│ 52926 ┆ -24.114548 ┆ -0.342333  ┆ -18.156683  ┆ … ┆ 0    ┆ 06414383cf ┆ 30.187642   ┆ true       │\n",
      "│ 52928 ┆ -24.911227 ┆ 0.123015   ┆ -17.233841  ┆ … ┆ 0    ┆ 06414383cf ┆ 30.291742   ┆ true       │\n",
      "│ 52931 ┆ 24.485893  ┆ 0.198116   ┆ 17.416981   ┆ … ┆ 0    ┆ 06414383cf ┆ 30.049118   ┆ true       │\n",
      "│ 52933 ┆ 24.548891  ┆ -0.020052  ┆ 17.264139   ┆ … ┆ 0    ┆ 06414383cf ┆ 30.011647   ┆ true       │\n",
      "└───────┴────────────┴────────────┴─────────────┴───┴──────┴────────────┴─────────────┴────────────┘\n",
      "shape: (9_618_463, 10)\n",
      "┌────────┬─────────────┬────────────┬────────────┬───┬──────┬────────────┬────────────┬────────────┐\n",
      "│ Time   ┆ AccV        ┆ AccML      ┆ AccAP      ┆ … ┆ Task ┆ patient_id ┆ Acc_MAGNIT ┆ is_outlier │\n",
      "│ ---    ┆ ---         ┆ ---        ┆ ---        ┆   ┆ ---  ┆ ---        ┆ UDE        ┆ _mag       │\n",
      "│ i64    ┆ f64         ┆ f64        ┆ f64        ┆   ┆ i8   ┆ str        ┆ ---        ┆ ---        │\n",
      "│        ┆             ┆            ┆            ┆   ┆      ┆            ┆ f64        ┆ bool       │\n",
      "╞════════╪═════════════╪════════════╪════════════╪═══╪══════╪════════════╪════════════╪════════════╡\n",
      "│ 0      ┆ -105738.418 ┆ 22109.6106 ┆ 51661.2103 ┆ … ┆ 0    ┆ 1e8d55d48d ┆ 119742.760 ┆ true       │\n",
      "│        ┆ 332         ┆ 42         ┆ 98         ┆   ┆      ┆            ┆ 34         ┆            │\n",
      "│ 1      ┆ 105728.7489 ┆ -22107.236 ┆ -51657.462 ┆ … ┆ 0    ┆ 1e8d55d48d ┆ 119732.166 ┆ true       │\n",
      "│        ┆ 57          ┆ 239        ┆ 694        ┆   ┆      ┆            ┆ 53         ┆            │\n",
      "│ 2      ┆ -105719.132 ┆ 22104.9135 ┆ 51653.7195 ┆ … ┆ 0    ┆ 1e8d55d48d ┆ 119721.631 ┆ true       │\n",
      "│        ┆ 627         ┆ 87         ┆ 51         ┆   ┆      ┆            ┆ 093        ┆            │\n",
      "│ 3      ┆ 105709.4376 ┆ -22102.541 ┆ -51649.987 ┆ … ┆ 0    ┆ 1e8d55d48d ┆ 119711.021 ┆ true       │\n",
      "│        ┆ 5           ┆ 995        ┆ 425        ┆   ┆      ┆            ┆ 931        ┆            │\n",
      "│ 4      ┆ -105699.781 ┆ 22100.1691 ┆ 51646.2336 ┆ … ┆ 0    ┆ 1e8d55d48d ┆ 119700.437 ┆ true       │\n",
      "│        ┆ 5           ┆ 86         ┆ 12         ┆   ┆      ┆            ┆ 482        ┆            │\n",
      "│ …      ┆ …           ┆ …          ┆ …          ┆ … ┆ …    ┆ …          ┆ …          ┆ …          │\n",
      "│ 443491 ┆ -1.8163e6   ┆ 20009.0142 ┆ -1.0640e6  ┆ … ┆ 0    ┆ 434732a5e3 ┆ 2.1051e6   ┆ true       │\n",
      "│        ┆             ┆ 64         ┆            ┆   ┆      ┆            ┆            ┆            │\n",
      "│ 443492 ┆ 1.8162e6    ┆ -20010.075 ┆ 1.0640e6   ┆ … ┆ 0    ┆ 434732a5e3 ┆ 2.1050e6   ┆ true       │\n",
      "│        ┆             ┆ 485        ┆            ┆   ┆      ┆            ┆            ┆            │\n",
      "│ 443493 ┆ -1.8188e6   ┆ 20041.3332 ┆ -1.0655e6  ┆ … ┆ 0    ┆ 434732a5e3 ┆ 2.1080e6   ┆ true       │\n",
      "│        ┆             ┆ 12         ┆            ┆   ┆      ┆            ┆            ┆            │\n",
      "│ 443494 ┆ 1.8140e6    ┆ -19990.770 ┆ 1.0628e6   ┆ … ┆ 0    ┆ 434732a5e3 ┆ 2.1025e6   ┆ true       │\n",
      "│        ┆             ┆ 975        ┆            ┆   ┆      ┆            ┆            ┆            │\n",
      "│ 443495 ┆ -1.8204e6   ┆ 20063.3133 ┆ -1.0665e6  ┆ … ┆ 0    ┆ 434732a5e3 ┆ 2.1099e6   ┆ true       │\n",
      "│        ┆             ┆ 26         ┆            ┆   ┆      ┆            ┆            ┆            │\n",
      "└────────┴─────────────┴────────────┴────────────┴───┴──────┴────────────┴────────────┴────────────┘\n",
      "shape: (316_554, 10)\n",
      "┌──────┬────────────┬───────────┬────────────┬───┬─────────┬────────────┬─────────────┬────────────┐\n",
      "│ Time ┆ AccV       ┆ AccML     ┆ AccAP      ┆ … ┆ Walking ┆ patient_id ┆ Acc_MAGNITU ┆ is_outlier │\n",
      "│ ---  ┆ ---        ┆ ---       ┆ ---        ┆   ┆ ---     ┆ ---        ┆ DE          ┆ _mag       │\n",
      "│ i64  ┆ f64        ┆ f64       ┆ f64        ┆   ┆ i64     ┆ str        ┆ ---         ┆ ---        │\n",
      "│      ┆            ┆           ┆            ┆   ┆         ┆            ┆ f64         ┆ bool       │\n",
      "╞══════╪════════════╪═══════════╪════════════╪═══╪═════════╪════════════╪═════════════╪════════════╡\n",
      "│ 1715 ┆ -20.587868 ┆ -7.620407 ┆ 20.962908  ┆ … ┆ 0       ┆ a171e61840 ┆ 30.35415    ┆ true       │\n",
      "│ 1717 ┆ 14.06747   ┆ 9.151195  ┆ -25.699131 ┆ … ┆ 0       ┆ a171e61840 ┆ 30.693377   ┆ true       │\n",
      "│ 1910 ┆ 0.526905   ┆ 7.762494  ┆ 33.052152  ┆ … ┆ 0       ┆ a171e61840 ┆ 33.95554    ┆ true       │\n",
      "│ 1911 ┆ -13.311803 ┆ 20.667404 ┆ 37.910822  ┆ … ┆ 0       ┆ a171e61840 ┆ 45.183803   ┆ true       │\n",
      "│ 1914 ┆ 1.454304   ┆ -6.039686 ┆ -34.55845  ┆ … ┆ 0       ┆ a171e61840 ┆ 35.112381   ┆ true       │\n",
      "│ …    ┆ …          ┆ …         ┆ …          ┆ … ┆ …       ┆ …          ┆ …           ┆ …          │\n",
      "│ 4040 ┆ -24.176547 ┆ -6.393739 ┆ -22.537217 ┆ … ┆ 0       ┆ 0506d9a39f ┆ 33.664692   ┆ true       │\n",
      "│ 4042 ┆ 38.757153  ┆ 2.703988  ┆ 2.812874   ┆ … ┆ 0       ┆ 0506d9a39f ┆ 38.953058   ┆ true       │\n",
      "│ 5059 ┆ -7.357523  ┆ -0.878686 ┆ -43.843425 ┆ … ┆ 0       ┆ 0506d9a39f ┆ 44.465167   ┆ true       │\n",
      "│ 5060 ┆ -12.966388 ┆ 2.086433  ┆ -39.303495 ┆ … ┆ 0       ┆ 0506d9a39f ┆ 41.439656   ┆ true       │\n",
      "│ 5061 ┆ 3.995509   ┆ 0.397924  ┆ 29.786248  ┆ … ┆ 0       ┆ 0506d9a39f ┆ 30.055665   ┆ true       │\n",
      "└──────┴────────────┴───────────┴────────────┴───┴─────────┴────────────┴─────────────┴────────────┘\n"
     ]
    }
   ],
   "source": [
    "def outlier_acc_magnitude(df: pl.DataFrame) -> pl.DataFrame:\n",
    "    df_outlier = df.with_columns((pl.col('Acc_MAGNITUDE') > 30).alias('is_outlier_mag'))\n",
    "    return df_outlier.filter(pl.col(\"is_outlier_mag\") == True)\n",
    "\n",
    "print(outlier_acc_magnitude(defog_df))\n",
    "print(outlier_acc_magnitude(notype_df))\n",
    "print(outlier_acc_magnitude(tdcsfog_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46ee20a5",
   "metadata": {
    "papermill": {
     "duration": 0.006806,
     "end_time": "2025-09-19T18:17:58.837648",
     "exception": false,
     "start_time": "2025-09-19T18:17:58.830842",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Standardize acceleration channels per patient (z-score)\n",
    "* Filtering first removes drift/spikes that would distord means/standard deviations.\n",
    "* Then z-scoring equalizes patients for fair modeling.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "38279469",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:17:58.852685Z",
     "iopub.status.busy": "2025-09-19T18:17:58.852333Z",
     "iopub.status.idle": "2025-09-19T18:18:08.131104Z",
     "shell.execute_reply": "2025-09-19T18:18:08.129501Z"
    },
    "papermill": {
     "duration": 9.289307,
     "end_time": "2025-09-19T18:18:08.133891",
     "exception": false,
     "start_time": "2025-09-19T18:17:58.844584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (468_159, 11)\n",
      "┌──────┬───────────┬───────────┬───────────┬───┬───────┬──────┬────────────┬───────────────┐\n",
      "│ Time ┆ AccV      ┆ AccML     ┆ AccAP     ┆ … ┆ Valid ┆ Task ┆ patient_id ┆ Acc_MAGNITUDE │\n",
      "│ ---  ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---   ┆ ---  ┆ ---        ┆ ---           │\n",
      "│ i64  ┆ f64       ┆ f64       ┆ f64       ┆   ┆ i8    ┆ i8   ┆ str        ┆ f64           │\n",
      "╞══════╪═══════════╪═══════════╪═══════════╪═══╪═══════╪══════╪════════════╪═══════════════╡\n",
      "│ 0    ┆ -3.613702 ┆ -4.313352 ┆ -4.165176 ┆ … ┆ 0     ┆ 0    ┆ be9d33541d ┆ 153.978961    │\n",
      "│ 1    ┆ 3.612643  ┆ 4.312322  ┆ 4.164315  ┆ … ┆ 0     ┆ 0    ┆ be9d33541d ┆ 153.943145    │\n",
      "│ 2    ┆ -3.613263 ┆ -4.312152 ┆ -4.16473  ┆ … ┆ 0     ┆ 0    ┆ be9d33541d ┆ 153.95834     │\n",
      "│ 3    ┆ 3.614617  ┆ 4.313473  ┆ 4.164943  ┆ … ┆ 0     ┆ 0    ┆ be9d33541d ┆ 153.978113    │\n",
      "│ 4    ┆ -3.611079 ┆ -4.31182  ┆ -4.163782 ┆ … ┆ 0     ┆ 0    ┆ be9d33541d ┆ 153.917911    │\n",
      "│ …    ┆ …         ┆ …         ┆ …         ┆ … ┆ …     ┆ …    ┆ …          ┆ …             │\n",
      "│ 1577 ┆ 0.390441  ┆ 3.101196  ┆ 0.377114  ┆ … ┆ 1     ┆ 1    ┆ 06414383cf ┆ 20.628529     │\n",
      "│ 1580 ┆ -0.409922 ┆ -3.22748  ┆ -0.394283 ┆ … ┆ 1     ┆ 1    ┆ 06414383cf ┆ 21.60884      │\n",
      "│ 1688 ┆ -0.398354 ┆ -3.000588 ┆ -0.445331 ┆ … ┆ 1     ┆ 1    ┆ 06414383cf ┆ 21.949696     │\n",
      "│ 1802 ┆ -0.427613 ┆ -3.023652 ┆ -0.477392 ┆ … ┆ 1     ┆ 1    ┆ 06414383cf ┆ 23.411585     │\n",
      "│ 2452 ┆ -0.524593 ┆ -3.010497 ┆ -0.581903 ┆ … ┆ 1     ┆ 1    ┆ 06414383cf ┆ 28.217266     │\n",
      "└──────┴───────────┴───────────┴───────────┴───┴───────┴──────┴────────────┴───────────────┘\n",
      "shape: (486_949, 9)\n",
      "┌───────┬───────────┬───────────┬───────────┬───┬───────┬──────┬────────────┬───────────────┐\n",
      "│ Time  ┆ AccV      ┆ AccML     ┆ AccAP     ┆ … ┆ Valid ┆ Task ┆ patient_id ┆ Acc_MAGNITUDE │\n",
      "│ ---   ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---   ┆ ---  ┆ ---        ┆ ---           │\n",
      "│ i64   ┆ f64       ┆ f64       ┆ f64       ┆   ┆ i8    ┆ i8   ┆ str        ┆ f64           │\n",
      "╞═══════╪═══════════╪═══════════╪═══════════╪═══╪═══════╪══════╪════════════╪═══════════════╡\n",
      "│ 0     ┆ -5.459917 ┆ 5.078533  ┆ 5.557393  ┆ … ┆ 0     ┆ 0    ┆ 1e8d55d48d ┆ 119742.76034  │\n",
      "│ 1     ┆ 5.459446  ┆ -5.078013 ┆ -5.557018 ┆ … ┆ 0     ┆ 0    ┆ 1e8d55d48d ┆ 119732.16653  │\n",
      "│ 2     ┆ -5.458921 ┆ 5.077454  ┆ 5.556587  ┆ … ┆ 0     ┆ 0    ┆ 1e8d55d48d ┆ 119721.631093 │\n",
      "│ 3     ┆ 5.458448  ┆ -5.076935 ┆ -5.556214 ┆ … ┆ 0     ┆ 0    ┆ 1e8d55d48d ┆ 119711.021931 │\n",
      "│ 4     ┆ -5.457922 ┆ 5.076364  ┆ 5.555782  ┆ … ┆ 0     ┆ 0    ┆ 1e8d55d48d ┆ 119700.437482 │\n",
      "│ …     ┆ …         ┆ …         ┆ …         ┆ … ┆ …     ┆ …    ┆ …          ┆ …             │\n",
      "│ 37493 ┆ -0.317898 ┆ 3.000242  ┆ -0.4967   ┆ … ┆ 0     ┆ 0    ┆ 434732a5e3 ┆ 4.0986e12     │\n",
      "│ 37494 ┆ 0.317811  ┆ -3.000202 ┆ 0.496609  ┆ … ┆ 0     ┆ 0    ┆ 434732a5e3 ┆ 4.0978e12     │\n",
      "│ 37495 ┆ -0.317752 ┆ 3.000131  ┆ -0.496546 ┆ … ┆ 0     ┆ 0    ┆ 434732a5e3 ┆ 4.0970e12     │\n",
      "│ 37496 ┆ 0.317665  ┆ -3.00009  ┆ 0.496455  ┆ … ┆ 0     ┆ 0    ┆ 434732a5e3 ┆ 4.0961e12     │\n",
      "│ 37497 ┆ -0.317606 ┆ 3.000019  ┆ -0.496391 ┆ … ┆ 0     ┆ 0    ┆ 434732a5e3 ┆ 4.0953e12     │\n",
      "└───────┴───────────┴───────────┴───────────┴───┴───────┴──────┴────────────┴───────────────┘\n",
      "shape: (267_710, 9)\n",
      "┌──────┬───────────┬───────────┬───────────┬───┬──────┬─────────┬────────────┬───────────────┐\n",
      "│ Time ┆ AccV      ┆ AccML     ┆ AccAP     ┆ … ┆ Turn ┆ Walking ┆ patient_id ┆ Acc_MAGNITUDE │\n",
      "│ ---  ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---  ┆ ---     ┆ ---        ┆ ---           │\n",
      "│ i64  ┆ f64       ┆ f64       ┆ f64       ┆   ┆ i64  ┆ i64     ┆ str        ┆ f64           │\n",
      "╞══════╪═══════════╪═══════════╪═══════════╪═══╪══════╪═════════╪════════════╪═══════════════╡\n",
      "│ 1542 ┆ -0.678575 ┆ 3.215689  ┆ 2.144167  ┆ … ┆ 0    ┆ 0       ┆ a171e61840 ┆ 19.733076     │\n",
      "│ 1609 ┆ -1.702092 ┆ -3.120664 ┆ 1.690087  ┆ … ┆ 0    ┆ 0       ┆ a171e61840 ┆ 17.382579     │\n",
      "│ 1714 ┆ -1.631935 ┆ -3.385064 ┆ 2.986406  ┆ … ┆ 0    ┆ 0       ┆ a171e61840 ┆ 26.893392     │\n",
      "│ 1715 ┆ -5.401267 ┆ -2.938399 ┆ 2.539975  ┆ … ┆ 0    ┆ 0       ┆ a171e61840 ┆ 30.35415      │\n",
      "│ 1717 ┆ 3.690635  ┆ 3.528663  ┆ -3.113839 ┆ … ┆ 0    ┆ 0       ┆ a171e61840 ┆ 30.693377     │\n",
      "│ …    ┆ …         ┆ …         ┆ …         ┆ … ┆ …    ┆ …       ┆ …          ┆ …             │\n",
      "│ 5057 ┆ 1.384847  ┆ -0.229026 ┆ 5.568359  ┆ … ┆ 0    ┆ 0       ┆ 0506d9a39f ┆ 24.497433     │\n",
      "│ 5059 ┆ -1.51051  ┆ -0.340695 ┆ -10.36978 ┆ … ┆ 0    ┆ 0       ┆ 0506d9a39f ┆ 44.465167     │\n",
      "│ 5060 ┆ -2.661986 ┆ 0.80892   ┆ -9.296001 ┆ … ┆ 0    ┆ 0       ┆ 0506d9a39f ┆ 41.439656     │\n",
      "│ 5061 ┆ 0.820218  ┆ 0.154263  ┆ 7.045024  ┆ … ┆ 0    ┆ 0       ┆ 0506d9a39f ┆ 30.055665     │\n",
      "│ 5062 ┆ 1.181545  ┆ -0.724016 ┆ 5.718217  ┆ … ┆ 0    ┆ 0       ┆ 0506d9a39f ┆ 24.922224     │\n",
      "└──────┴───────────┴───────────┴───────────┴───┴──────┴─────────┴────────────┴───────────────┘\n"
     ]
    }
   ],
   "source": [
    "defog_df   = standardize_acc_by_patient(defog_df)\n",
    "notype_df  = standardize_acc_by_patient(notype_df)\n",
    "tdcsfog_df = standardize_acc_by_patient(tdcsfog_df)\n",
    "\n",
    "# 10b) Check z-score outliers (|z| > 3)\n",
    "print(detect_outliers(defog_df))\n",
    "print(detect_outliers(notype_df))\n",
    "print(detect_outliers(tdcsfog_df))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "238daab1",
   "metadata": {
    "papermill": {
     "duration": 0.01178,
     "end_time": "2025-09-19T18:18:08.157535",
     "exception": false,
     "start_time": "2025-09-19T18:18:08.145755",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Example plot for a single patient "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "806e9d25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:18:08.182055Z",
     "iopub.status.busy": "2025-09-19T18:18:08.181666Z",
     "iopub.status.idle": "2025-09-19T18:18:13.382537Z",
     "shell.execute_reply": "2025-09-19T18:18:13.380913Z"
    },
    "papermill": {
     "duration": 5.215609,
     "end_time": "2025-09-19T18:18:13.384947",
     "exception": false,
     "start_time": "2025-09-19T18:18:08.169338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "example_pid = unique_defog_patients[0] if len(unique_defog_patients) > 0 else None\n",
    "if example_pid is not None:\n",
    "    df_plot = defog_df.filter(pl.col(\"patient_id\") == example_pid).to_pandas().sort_values(\"Time\")\n",
    "    plt.figure(figsize=(15, 6))\n",
    "    # Acceleration channels\n",
    "    plt.plot(df_plot['Time'], df_plot['AccV'],  label='AccV',  alpha=0.7)\n",
    "    plt.plot(df_plot['Time'], df_plot['AccML'], label='AccML', alpha=0.7)\n",
    "    plt.plot(df_plot['Time'], df_plot['AccAP'], label='AccAP', alpha=0.7)\n",
    "    # Event channels (if present)\n",
    "    for ev in [\"StartHesitation\", \"Turn\", \"Walking\"]:\n",
    "        if ev in df_plot.columns:\n",
    "            plt.plot(df_plot['Time'], df_plot[ev], label=ev, alpha=0.7)\n",
    "    plt.xlabel(\"Time (s)\")\n",
    "    plt.ylabel(\"Acceleration (m/s²)\")\n",
    "    plt.title(f\"Patient: {example_pid} - Acceleration + FOG Events (Filtered & Standardized)\")\n",
    "    plt.legend(loc=\"upper right\")\n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0291135",
   "metadata": {
    "papermill": {
     "duration": 0.012689,
     "end_time": "2025-09-19T18:18:13.407153",
     "exception": false,
     "start_time": "2025-09-19T18:18:13.394464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Dtype summmary "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7f8927f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-19T18:18:13.427822Z",
     "iopub.status.busy": "2025-09-19T18:18:13.427253Z",
     "iopub.status.idle": "2025-09-19T18:18:13.438374Z",
     "shell.execute_reply": "2025-09-19T18:18:13.436059Z"
    },
    "papermill": {
     "duration": 0.024454,
     "end_time": "2025-09-19T18:18:13.440726",
     "exception": false,
     "start_time": "2025-09-19T18:18:13.416272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DEFOG DATA TYPES:\n",
      "[Int64, Float64, Float64, Float64, Int64, Int64, Int64, Int8, Int8, String, Float64]\n",
      "\n",
      "TDCSFOG DATA TYPES:\n",
      "[Int64, Float64, Float64, Float64, Int64, Int64, Int64, String, Float64]\n",
      "\n",
      "NOTYPE DATA TYPES:\n",
      "[Int64, Float64, Float64, Float64, Int64, Int8, Int8, String, Float64]\n",
      "\n",
      "shape: (1, 11)\n",
      "┌──────┬──────┬───────┬───────┬───┬───────┬──────┬────────────┬───────────────┐\n",
      "│ Time ┆ AccV ┆ AccML ┆ AccAP ┆ … ┆ Valid ┆ Task ┆ patient_id ┆ Acc_MAGNITUDE │\n",
      "│ ---  ┆ ---  ┆ ---   ┆ ---   ┆   ┆ ---   ┆ ---  ┆ ---        ┆ ---           │\n",
      "│ u32  ┆ u32  ┆ u32   ┆ u32   ┆   ┆ u32   ┆ u32  ┆ u32        ┆ u32           │\n",
      "╞══════╪══════╪═══════╪═══════╪═══╪═══════╪══════╪════════════╪═══════════════╡\n",
      "│ 0    ┆ 0    ┆ 0     ┆ 0     ┆ … ┆ 0     ┆ 0    ┆ 0          ┆ 0             │\n",
      "└──────┴──────┴───────┴───────┴───┴───────┴──────┴────────────┴───────────────┘\n",
      "shape: (1, 9)\n",
      "┌──────┬──────┬───────┬───────┬───┬───────┬──────┬────────────┬───────────────┐\n",
      "│ Time ┆ AccV ┆ AccML ┆ AccAP ┆ … ┆ Valid ┆ Task ┆ patient_id ┆ Acc_MAGNITUDE │\n",
      "│ ---  ┆ ---  ┆ ---   ┆ ---   ┆   ┆ ---   ┆ ---  ┆ ---        ┆ ---           │\n",
      "│ u32  ┆ u32  ┆ u32   ┆ u32   ┆   ┆ u32   ┆ u32  ┆ u32        ┆ u32           │\n",
      "╞══════╪══════╪═══════╪═══════╪═══╪═══════╪══════╪════════════╪═══════════════╡\n",
      "│ 0    ┆ 0    ┆ 0     ┆ 0     ┆ … ┆ 0     ┆ 0    ┆ 0          ┆ 0             │\n",
      "└──────┴──────┴───────┴───────┴───┴───────┴──────┴────────────┴───────────────┘\n",
      "shape: (1, 9)\n",
      "┌──────┬──────┬───────┬───────┬───┬──────┬─────────┬────────────┬───────────────┐\n",
      "│ Time ┆ AccV ┆ AccML ┆ AccAP ┆ … ┆ Turn ┆ Walking ┆ patient_id ┆ Acc_MAGNITUDE │\n",
      "│ ---  ┆ ---  ┆ ---   ┆ ---   ┆   ┆ ---  ┆ ---     ┆ ---        ┆ ---           │\n",
      "│ u32  ┆ u32  ┆ u32   ┆ u32   ┆   ┆ u32  ┆ u32     ┆ u32        ┆ u32           │\n",
      "╞══════╪══════╪═══════╪═══════╪═══╪══════╪═════════╪════════════╪═══════════════╡\n",
      "│ 0    ┆ 0    ┆ 0     ┆ 0     ┆ … ┆ 0    ┆ 0       ┆ 0          ┆ 0             │\n",
      "└──────┴──────┴───────┴───────┴───┴──────┴─────────┴────────────┴───────────────┘\n"
     ]
    }
   ],
   "source": [
    "print(f'DEFOG DATA TYPES:\\n{defog_df.dtypes}\\n')\n",
    "print(f'TDCSFOG DATA TYPES:\\n{tdcsfog_df.dtypes}\\n')\n",
    "print(f'NOTYPE DATA TYPES:\\n{notype_df.dtypes}\\n')\n",
    "\n",
    "# Null counts\n",
    "print(defog_df.null_count())\n",
    "print(notype_df.null_count())\n",
    "print(tdcsfog_df.null_count())"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 5677426,
     "sourceId": 41880,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 131.153347,
   "end_time": "2025-09-19T18:18:16.409076",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-19T18:16:05.255729",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
